// The MIT License (MIT)
//
// Copyright (c) 2014-2016 Brno University of Technology, PRISTINE project
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#include "DIF/RA/QueueAlloc/QueuePerNFlow/QueuePerNFlow.h"

Define_Module(QueuePerNFlow);

void QueuePerNFlow::onNFlowAlloc(RMTPort* port, Flow* flow)
{
    rmtAllocator->addQueue(RMTQueue::OUTPUT, port, idGenerator->generateIDFromFlow(flow).c_str())->setFlow(flow);
    flow->swapFlow();
    rmtAllocator->addQueue(RMTQueue::INPUT, port, idGenerator->generateIDFromFlow(flow).c_str())->setFlow(flow);
    flow->swapFlow();
}

void QueuePerNFlow::onNM1PortInit(RMTPort* port)
{
    // In this policy, each port gets a queue for each active (N)-flow.
    // Since there's a possibility of RMT receiving a PDU generated by a mock
    // EFCP instance (i.e. its connection-id equals {0, 0, MGMT}), we need to
    // take care of this exception by adding a fallback queue.

    rmtAllocator->addQueue(RMTQueue::OUTPUT, port, "noflow");
    rmtAllocator->addQueue(RMTQueue::INPUT, port, "noflow");
}
